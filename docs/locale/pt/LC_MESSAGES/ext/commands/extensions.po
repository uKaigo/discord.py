# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-present, Rapptz
# This file is distributed under the same license as the discord.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: discord.py 1.7.0a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-30 23:51-0300\n"
"PO-Revision-Date: 2021-01-31 19:17-0300\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt\n"
"Language-Team: pt <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../ext/commands/extensions.rst:6
msgid "Extensions"
msgstr ""

#: ../../ext/commands/extensions.rst:8
msgid ""
"There comes a time in the bot development when you want to extend the bot"
" functionality at run-time and quickly unload and reload code (also "
"called hot-reloading). The command framework comes with this ability "
"built-in, with a concept called **extensions**."
msgstr ""

#: ../../ext/commands/extensions.rst:11
msgid "Primer"
msgstr ""

#: ../../ext/commands/extensions.rst:13
msgid ""
"An extension at its core is a python file with an entry point called "
"``setup``. This setup must be a plain Python function (not a coroutine). "
"It takes a single parameter -- the :class:`~.commands.Bot` that loads the"
" extension."
msgstr ""

#: ../../ext/commands/extensions.rst:15
msgid "An example extension looks like this:"
msgstr ""

#: ../../ext/commands/extensions.rst:17
msgid "hello.py"
msgstr ""

#: ../../ext/commands/extensions.rst:30
msgid ""
"In this example we define a simple command, and when the extension is "
"loaded this command is added to the bot. Now the final step to this is "
"loading the extension, which we do by calling "
":meth:`.commands.Bot.load_extension`. To load this extension we call "
"``bot.load_extension('hello')``."
msgstr ""

#: ../../ext/commands/extensions.rst:32
msgid "Cogs"
msgstr ""

#: ../../ext/commands/extensions.rst:35
msgid ""
"Extensions are usually used in conjunction with cogs. To read more about "
"them, check out the documentation, :ref:`ext_commands_cogs`."
msgstr ""

#: ../../ext/commands/extensions.rst:39
msgid ""
"Extension paths are ultimately similar to the import mechanism. What this"
" means is that if there is a folder, then it must be dot-qualified. For "
"example to load an extension in ``plugins/hello.py`` then we use the "
"string ``plugins.hello``."
msgstr ""

#: ../../ext/commands/extensions.rst:42
msgid "Reloading"
msgstr ""

#: ../../ext/commands/extensions.rst:44
msgid ""
"When you make a change to the extension and want to reload the "
"references, the library comes with a function to do this for you, "
":meth:`Bot.reload_extension`."
msgstr ""

#: ../../ext/commands/extensions.rst:50
msgid ""
"Once the extension reloads, any changes that we did will be applied. This"
" is useful if we want to add or remove functionality without restarting "
"our bot. If an error occurred during the reloading process, the bot will "
"pretend as if the reload never happened."
msgstr ""

#: ../../ext/commands/extensions.rst:53
msgid "Cleaning Up"
msgstr ""

#: ../../ext/commands/extensions.rst:55
msgid ""
"Although rare, sometimes an extension needs to clean-up or know when it's"
" being unloaded. For cases like these, there is another entry point named"
" ``teardown`` which is similar to ``setup`` except called when the "
"extension is unloaded."
msgstr ""

#: ../../ext/commands/extensions.rst:57
msgid "basic_ext.py"
msgstr ""

